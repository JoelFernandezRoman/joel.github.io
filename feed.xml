<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-11-09T22:34:03+01:00</updated><id>/feed.xml</id><title type="html">Joel Fernández</title><subtitle>I am a computer engineer with a keen interest in data science, statistics, artificial intelligence, as well as a passion for finance, stock analysis, risk management, and portfolio theory. I have solid knowledge in software development, particularly in Python, where I develop most of my projects.
</subtitle><author><name>Joel Fernández Román</name><email>joel.fernandez.roman@gmail.com</email></author><entry><title type="html">Test post</title><link href="/test_cat/test.html" rel="alternate" type="text/html" title="Test post" /><published>2024-11-09T00:00:00+01:00</published><updated>2024-11-09T00:00:00+01:00</updated><id>/test_cat/test</id><content type="html" xml:base="/test_cat/test.html"><![CDATA[<ul>
  <li>
    <p>LIS (Longest Increasing Subsequence) :</p>
  </li>
  <li>DP            O(<em>n</em><sup>2</sup>)</li>
  <li>Binary Search O(<em>n</em>log<em>n</em>)</li>
  <li>Segment Tree  O(<em>n</em>log<em>n</em>)</li>
</ul>

<p>idx: [0  1  2  3  4  5  6]<br />
val: [1  2  3  4  4  5  6] 에서 4를 찾을 경우 idx 3에 위치한 iterator를 리턴합니다.</p>

<!--more-->
<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cstdio&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vi</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pii</span><span class="o">&gt;</span> <span class="n">vii</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">vi</span> <span class="n">inp</span><span class="p">;</span>

  <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">tmp</span><span class="p">;</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tmp</span><span class="p">);</span>
    <span class="n">inp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// 첫 대소 비교를 위해 -1 원소 하나를 가지고 시작</span>
  <span class="n">vi</span> <span class="n">ans</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">inp</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">lower_bound</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ans</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">num</span><span class="p">);</span>
      <span class="o">*</span><span class="n">it</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">printf</span><span class="p">(</span><span class="s">"%lu</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cstdio&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;utility&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;limits&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vi</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pii</span><span class="o">&gt;</span> <span class="n">vii</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">comp</span><span class="p">(</span><span class="k">const</span> <span class="n">pii</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">pii</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">);</span>
<span class="n">vi</span> <span class="nf">lis</span><span class="p">(</span><span class="k">const</span> <span class="n">vii</span> <span class="o">&amp;</span><span class="n">inp</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">vii</span> <span class="n">inp</span><span class="p">;</span>

  <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">tmp</span><span class="p">;</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tmp</span><span class="p">);</span>
    <span class="n">inp</span><span class="p">.</span><span class="n">push_back</span><span class="p">({</span><span class="n">tmp</span><span class="p">,</span> <span class="n">i</span><span class="p">});</span>
  <span class="p">}</span>

  <span class="n">vi</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">lis</span><span class="p">(</span><span class="n">inp</span><span class="p">);</span>

  <span class="n">printf</span><span class="p">(</span><span class="s">"%lu</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="n">ans</span><span class="p">)</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">comp</span><span class="p">(</span><span class="k">const</span> <span class="n">pii</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">pii</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">vi</span> <span class="n">lis</span><span class="p">(</span><span class="k">const</span> <span class="n">vii</span> <span class="o">&amp;</span><span class="n">inp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">vii</span> <span class="n">ans</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">});</span>
  <span class="n">vi</span> <span class="n">backtrace</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
  <span class="n">vi</span> <span class="n">lis</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">p</span> <span class="o">:</span> <span class="n">inp</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">first</span><span class="p">)</span> <span class="p">{</span>
      <span class="cm">/* 추가 코드 */</span>
      <span class="n">backtrace</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">]</span> <span class="o">=</span> <span class="n">ans</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">second</span><span class="p">;</span>
      <span class="cm">/* 추가 코드 END */</span>
      <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">lower_bound</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ans</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">p</span><span class="p">,</span> <span class="n">comp</span><span class="p">);</span>
      <span class="cm">/* 추가 코드 */</span>
      <span class="n">backtrace</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">it</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
      <span class="cm">/* 추가 코드 END */</span>
      <span class="o">*</span><span class="n">it</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="cm">/* 추가 코드 */</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">ans</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">second</span><span class="p">;</span> <span class="n">cur</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">backtrace</span><span class="p">[</span><span class="n">cur</span><span class="p">])</span>
    <span class="n">lis</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">inp</span><span class="p">[</span><span class="n">cur</span><span class="p">].</span><span class="n">first</span><span class="p">);</span>
  <span class="n">reverse</span><span class="p">(</span><span class="n">lis</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">lis</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
  <span class="cm">/* 추가 코드 END */</span>
  <span class="k">return</span> <span class="n">lis</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<!-- Links -->]]></content><author><name>Joel Fernández Román</name><email>joel.fernandez.roman@gmail.com</email></author><category term="test_cat" /><category term="test_tag" /><summary type="html"><![CDATA[LIS (Longest Increasing Subsequence) : DP O(n2) Binary Search O(nlogn) Segment Tree O(nlogn) idx: [0 1 2 3 4 5 6] val: [1 2 3 4 4 5 6] 에서 4를 찾을 경우 idx 3에 위치한 iterator를 리턴합니다.]]></summary></entry><entry><title type="html">Test post</title><link href="/test_cat/test-2.html" rel="alternate" type="text/html" title="Test post" /><published>2024-11-09T00:00:00+01:00</published><updated>2024-11-09T00:00:00+01:00</updated><id>/test_cat/test-2</id><content type="html" xml:base="/test_cat/test-2.html"><![CDATA[<ul>
  <li>
    <p>LIS (Longest Increasing Subsequence) :</p>
  </li>
  <li>DP            O(<em>n</em><sup>2</sup>)</li>
  <li>Binary Search O(<em>n</em>log<em>n</em>)</li>
  <li>Segment Tree  O(<em>n</em>log<em>n</em>)</li>
</ul>

<p>idx: [0  1  2  3  4  5  6]<br />
val: [1  2  3  4  4  5  6] 에서 4를 찾을 경우 idx 3에 위치한 iterator를 리턴합니다.</p>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cstdio&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vi</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pii</span><span class="o">&gt;</span> <span class="n">vii</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">vi</span> <span class="n">inp</span><span class="p">;</span>

  <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">tmp</span><span class="p">;</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tmp</span><span class="p">);</span>
    <span class="n">inp</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// 첫 대소 비교를 위해 -1 원소 하나를 가지고 시작</span>
  <span class="n">vi</span> <span class="n">ans</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">inp</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">lower_bound</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ans</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">num</span><span class="p">);</span>
      <span class="o">*</span><span class="n">it</span> <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">printf</span><span class="p">(</span><span class="s">"%lu</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">()</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;cstdio&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;utility&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;limits&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">pii</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vi</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pii</span><span class="o">&gt;</span> <span class="n">vii</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">n</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">comp</span><span class="p">(</span><span class="k">const</span> <span class="n">pii</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">pii</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">);</span>
<span class="n">vi</span> <span class="nf">lis</span><span class="p">(</span><span class="k">const</span> <span class="n">vii</span> <span class="o">&amp;</span><span class="n">inp</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">vii</span> <span class="n">inp</span><span class="p">;</span>

  <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">tmp</span><span class="p">;</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tmp</span><span class="p">);</span>
    <span class="n">inp</span><span class="p">.</span><span class="n">push_back</span><span class="p">({</span><span class="n">tmp</span><span class="p">,</span> <span class="n">i</span><span class="p">});</span>
  <span class="p">}</span>

  <span class="n">vi</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">lis</span><span class="p">(</span><span class="n">inp</span><span class="p">);</span>

  <span class="n">printf</span><span class="p">(</span><span class="s">"%lu</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">ans</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">:</span> <span class="n">ans</span><span class="p">)</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">"%d "</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">comp</span><span class="p">(</span><span class="k">const</span> <span class="n">pii</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">pii</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">vi</span> <span class="n">lis</span><span class="p">(</span><span class="k">const</span> <span class="n">vii</span> <span class="o">&amp;</span><span class="n">inp</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">vii</span> <span class="n">ans</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">});</span>
  <span class="n">vi</span> <span class="n">backtrace</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
  <span class="n">vi</span> <span class="n">lis</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">p</span> <span class="o">:</span> <span class="n">inp</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">first</span><span class="p">)</span> <span class="p">{</span>
      <span class="cm">/* 추가 코드 */</span>
      <span class="n">backtrace</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">]</span> <span class="o">=</span> <span class="n">ans</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">second</span><span class="p">;</span>
      <span class="cm">/* 추가 코드 END */</span>
      <span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">lower_bound</span><span class="p">(</span><span class="n">ans</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ans</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">p</span><span class="p">,</span> <span class="n">comp</span><span class="p">);</span>
      <span class="cm">/* 추가 코드 */</span>
      <span class="n">backtrace</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">it</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
      <span class="cm">/* 추가 코드 END */</span>
      <span class="o">*</span><span class="n">it</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="cm">/* 추가 코드 */</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">ans</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">second</span><span class="p">;</span> <span class="n">cur</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">backtrace</span><span class="p">[</span><span class="n">cur</span><span class="p">])</span>
    <span class="n">lis</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">inp</span><span class="p">[</span><span class="n">cur</span><span class="p">].</span><span class="n">first</span><span class="p">);</span>
  <span class="n">reverse</span><span class="p">(</span><span class="n">lis</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">lis</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
  <span class="cm">/* 추가 코드 END */</span>
  <span class="k">return</span> <span class="n">lis</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<!-- Links -->]]></content><author><name>Joel Fernández Román</name><email>joel.fernandez.roman@gmail.com</email></author><category term="test_cat" /><category term="test_tag" /><summary type="html"><![CDATA[LIS (Longest Increasing Subsequence) : DP O(n2) Binary Search O(nlogn) Segment Tree O(nlogn) idx: [0 1 2 3 4 5 6] val: [1 2 3 4 4 5 6] 에서 4를 찾을 경우 idx 3에 위치한 iterator를 리턴합니다. #include &lt;cstdio&gt; #include &lt;algorithm&gt; #include &lt;vector&gt; using namespace std; typedef pair&lt;int, int&gt; pii; typedef vector&lt;int&gt; vi; typedef vector&lt;pii&gt; vii; int n; int main() { vi inp; scanf("%d", &amp;n); for (int i = 0; i &lt; n; i++) { int tmp; scanf("%d", &amp;tmp); inp.push_back(tmp); } // 첫 대소 비교를 위해 -1 원소 하나를 가지고 시작 vi ans (1, -1); for (int num : inp) { if (ans.back() &lt; num) { ans.push_back(num); } else { auto it = lower_bound(ans.begin(), ans.end(), num); *it = num; } } printf("%lu\n", ans.size()-1); } #include &lt;cstdio&gt; #include &lt;algorithm&gt; #include &lt;vector&gt; #include &lt;utility&gt; #include &lt;limits&gt; using namespace std; typedef pair&lt;int, int&gt; pii; typedef vector&lt;int&gt; vi; typedef vector&lt;pii&gt; vii; int n; bool comp(const pii &amp;a, const pii &amp;b); vi lis(const vii &amp;inp); int main() { vii inp; scanf("%d", &amp;n); for (int i = 0; i &lt; n; i++) { int tmp; scanf("%d", &amp;tmp); inp.push_back({tmp, i}); } vi ans = lis(inp); printf("%lu\n", ans.size()); for (int i : ans) printf("%d ", i); printf("\n"); } bool comp(const pii &amp;a, const pii &amp;b) { return a.first &lt; b.first; } vi lis(const vii &amp;inp) { vii ans (1, {-1, -1}); vi backtrace (n+1, -1); vi lis; for (auto p : inp) { if (ans.back().first &lt; p.first) { /* 추가 코드 */ backtrace[p.second] = ans.back().second; /* 추가 코드 END */ ans.push_back(p); } else { auto it = lower_bound(ans.begin(), ans.end(), p, comp); /* 추가 코드 */ backtrace[p.second] = (it-1)-&gt;second; /* 추가 코드 END */ *it = p; } } /* 추가 코드 */ for (int cur = ans.back().second; cur &gt;= 0; cur = backtrace[cur]) lis.push_back(inp[cur].first); reverse(lis.begin(), lis.end()); /* 추가 코드 END */ return lis; }]]></summary></entry></feed>